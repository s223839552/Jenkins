pipeline {
    agent any

    environment {
        STAGING_SERVER = 'server1'
        PRODUCTION_SERVER = 'server2'
        RECIPIENTS = 'dileka.thilakarathna1@gmail.com'
    }

    stages {
        stage('Build') {
            steps {
                script {
                    // Using Maven to compile and package the code
                    sh 'mvn clean package'
                }
            }
        }

        stage('Unit and Integration Tests') {
            steps {
                script {
                    // Running JUnit and TestNG tests
                    sh 'mvn test'
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: '**/target/*.xml', allowEmptyArchive: true
                    junit '**/target/*.xml'
                }
                failure {
                    emailext (
                        to: env.RECIPIENTS,
                        subject: "Unit and Integration Tests Failed",
                        body: "Please check the Jenkins console output for more details.",
                        attachLog: true
                    )
                }
            }
        }

        stage('Code Analysis') {
            steps {
                script {
                    // Running SonarQube analysis
                    withSonarQubeEnv('SonarQube') {
                        sh 'mvn sonar:sonar'
                    }
                }
            }
        }

        stage('Security Scan') {
            steps {
                script {
                    // Running OWASP Dependency-Check
                    sh 'mvn org.owasp:dependency-check-maven:check'
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: '**/dependency-check-report.html', allowEmptyArchive: true
                }
                failure {
                    emailext (
                        to: env.RECIPIENTS,
                        subject: "Security Scan Failed",
                        body: "Please check the Jenkins console output and dependency-check-report.html for more details.",
                        attachLog: true
                    )
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                script {
                    // Deploying to the staging environment using AWS CodeDeploy
                    sh 'aws deploy create-deployment --application-name your-application --deployment-group-name staging --s3-location bucket=your-bucket,key=your-app.zip,bundleType=zip'
                }
            }
        }

        stage('Integration Tests on Staging') {
            steps {
                script {
                    // Running Selenium tests on the staging environment
                    sh 'mvn verify -Pselenium-tests'
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    // Deploying to the production environment using AWS CodeDeploy
                    sh 'aws deploy create-deployment --application-name your-application --deployment-group-name production --s3-location bucket=your-bucket,key=your-app.zip,bundleType=zip'
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
